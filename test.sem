|Func ok,returns Int
|--Block
|----Return
|------Number 0[Semantic-check] with type: Const
|Func ok,returns Int
|--Declare of a(Int) in Params scope
|--Block
|----Return
|------Access a[Semantic-check] with type: Int
|Func func,returns Int
|--Declare of x(Int) in Params scope
|--Declare of y(Int) in Params scope
|--Block
|----Return
|------Binop Plus[Semantic-check] with type: Int
|--------Access x[Semantic-check] with type: Int
|--------Access y[Semantic-check] with type: Int
|Func main,returns Int
|--Block
|----Nil
|----DeclStmt
|------Declare of b(Int) in Local scope
|--------Number 2[Semantic-check] with type: Const
|----DeclStmt
|------Declare of b(Int) in Local scope
|--------Number 3[Semantic-check] with type: Const
|----ExprStmt
|------Nil
|----ExprStmt
|------Nil
|----Nil
|----DeclStmt
|------Declare of arr(IntArray([3])) in Local scope
|--------Number 3[Semantic-check] with type: Const
|--------Number 0[Semantic-check] with type: Const
|--------Number 1[Semantic-check] with type: Const
|--------Number 2[Semantic-check] with type: Const
|----Assign arr
|------FloatNumber 1.5[Semantic-check] with type: Float
|------Number 2[Semantic-check] with type: Const
|----DeclStmt
|------Declare of non_arr(Int) in Local scope
|--------Number 0[Semantic-check] with type: Const
|----Assign non_arr
|------Number 1[Semantic-check] with type: Const
|----ExprStmt
|------Function call func[Semantic-check] with type: Int
|--------Number 1[Semantic-check] with type: Const
|----DeclStmt
|------Declare of var(Int) in Local scope
|--------Number 1[Semantic-check] with type: Const
|----DeclStmt
|------Declare of res(Int) in Local scope
|--------Binop Plus[Semantic-check] with type: Int
|----------Access var[Semantic-check] with type: Int
|----------Access arr[Semantic-check] with type: IntArray([3])
|----Break
|----Continue
|Func Pi,returns Float
|--Block
|----Return
|------Number 3[Semantic-check] with type: Const
